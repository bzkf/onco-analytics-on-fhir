name: ci

on:
  pull_request:
    branches:
      - master
  push:
    branches:
      - master
  release:
    types:
      - created
  merge_group:
    types:
      - checks_requested

permissions:
  contents: read

env:
  ONCO_ANALYTICS_NAMESPACE_NAME: bzkf-onco-analytics

jobs:
  build-decompose-xml-image:
    name: build decompose-xmls container image
    uses: miracum/.github/.github/workflows/standard-build.yaml@0b72274fb79ff2e45b917bdb7426f575e2e2e0ea # v1.17.0
    permissions:
      contents: write
      id-token: write
      packages: write
      pull-requests: write
      actions: read
      security-events: write
    with:
      image: ghcr.io/${{ github.repository }}/decompose-xmls
      build-context: src/decompose_xmls
      enable-build-test-layer: false
    secrets:
      github-token: ${{ secrets.GITHUB_TOKEN }}

  build-obds-fhir-to-opal-image:
    name: build obds-fhir-to-opal container image
    uses: miracum/.github/.github/workflows/standard-build.yaml@0b72274fb79ff2e45b917bdb7426f575e2e2e0ea # v1.17.0
    permissions:
      contents: write
      id-token: write
      packages: write
      pull-requests: write
      actions: read
      security-events: write
    with:
      image: ghcr.io/${{ github.repository }}/obds-fhir-to-opal
      build-context: src/obds_fhir_to_opal
      enable-build-test-layer: false
    secrets:
      github-token: ${{ secrets.GITHUB_TOKEN }}

  lint:
    uses: miracum/.github/.github/workflows/standard-lint.yaml@0b72274fb79ff2e45b917bdb7426f575e2e2e0ea # v1.17.0
    permissions:
      contents: read
      pull-requests: write
      issues: write
      security-events: write
      actions: read
    with:
      enable-validate-gradle-wrapper: false
      codeql-languages: '["python"]'
      enable-codeql: false
      enable-verify-base-image-signature: false
    secrets:
      github-token: ${{ secrets.GITHUB_TOKEN }}

  tests:
    name: run decompose-xmls tests
    strategy:
      matrix:
        # Python versions to run tests for
        python-version: ["3.11"]
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          persist-credentials: false
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@e797f83bcb11b83ae66e0230d6156d7c80228e7c # v6.0.0
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        working-directory: src/decompose_xmls
        run: |
          pip install --require-hashes -r requirements-test.txt
      - name: Run decompose_xmls tests
        working-directory: src/decompose_xmls
        run: |
          pytest

  test-compose:
    name: run compose e2e tests
    runs-on: ubuntu-24.04
    needs:
      - build-decompose-xml-image
      - build-obds-fhir-to-opal-image
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@f4a75cfd619ee5ce8d5b864b0d183aff3c69b55a # v2.13.1
        with:
          egress-policy: audit # change to 'egress-policy: block' after couple of runs

      # <https://docs.docker.com/storage/containerd/>
      # via <https://github.com/docker/setup-buildx-action/issues/257>
      - name: Set up containerd image store
        shell: bash
        run: |
          [ -f /etc/docker/daemon.json ] || echo "{}" | sudo tee /etc/docker/daemon.json
          jq '. | .+{"features": {"containerd-snapshotter": true}}' /etc/docker/daemon.json > /tmp/docker-daemon-with-containerd.json
          sudo mv /tmp/docker-daemon-with-containerd.json /etc/docker/daemon.json
          cat /etc/docker/daemon.json
          sudo systemctl restart docker
          docker info -f '{{ .DriverStatus }}'

      - name: Download image
        if: ${{ github.event_name == 'pull_request' }}
        uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v5.0.0
        with:
          name: ${{ needs.build-decompose-xml-image.outputs.image-slug }}
          path: /tmp

      - name: Load image
        if: ${{ github.event_name == 'pull_request' }}
        run: |
          docker load --input /tmp/image.tar
          docker image ls

      - name: Download image
        if: ${{ github.event_name == 'pull_request' }}
        uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v5.0.0
        with:
          name: ${{ needs.build-obds-fhir-to-opal-image.outputs.image-slug }}
          path: /tmp

      - name: Load image
        if: ${{ github.event_name == 'pull_request' }}
        run: |
          docker load --input /tmp/image.tar
          docker image ls

      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          persist-credentials: false

      - name: start Kafka & Kafka Connect
        working-directory: docker-compose/
        run: |
          docker compose -f compose.kafka.yaml up -d
          # ðŸ˜¬
          sleep 60

      - name: load the obds reports from disk, turn them into individual reports and send them to Kafka
        working-directory: docker-compose/
        env:
          DECOMPOSE_XMLS_IMAGE_TAG: ${{ needs.build-decompose-xml-image.outputs.image-version }}
        run: |
          USER_ID=${UID} GROUP_ID=${GID} docker compose --env-file=.demo.env -f compose.decompose-xmls.yaml up

      - name: convert reports to FHIR resources
        working-directory: docker-compose/
        run: |
          docker compose -f compose.obds-to-fhir.yaml up -d
          # not a great idea, probably better to create an init container
          # exiting if the output topic contains the expected number of resources after some tries.
          sleep 60

      - name: de-identify the resources
        working-directory: docker-compose/
        run: |
          docker compose --env-file=.demo.env -f compose.pseudonymization.yaml up -d
          # again, not a great idea.
          sleep 60

      - name: load the resources into Delta Lake tables
        working-directory: docker-compose/
        run: |
          docker compose --project-name=docker-compose --env-file=.demo.env -f compose.fhir-to-delta.yaml -f trino-pathling/compose.yaml --project-directory trino-pathling/ up -d
          # once again, a bad idea
          sleep 120

      - name: query them using trino
        run: |
          curl -o trino-cli.jar https://repo1.maven.org/maven2/io/trino/trino-cli/472/trino-cli-472-executable.jar
          java -jar trino-cli.jar --debug --execute 'SELECT * FROM fhir.default.Patient'
          java -jar trino-cli.jar --debug --execute 'SELECT * FROM fhir.default.Observation'
          java -jar trino-cli.jar --debug --execute 'SELECT * FROM fhir.default.Condition'

      # we could use a matrix strategy to run this in parallel
      - name: convert the FHIR resources to the CSV dataset (PoC)
        working-directory: docker-compose/
        env:
          STUDY_NAME: "PoC"
          OUTPUT_FILENAME: "df-poc.csv"
          OBDS_FHIR_TO_OPAL_IMAGE_TAG: ${{ needs.build-obds-fhir-to-opal-image.outputs.image-version }}
        run: |
          sudo chown -R 1001:1001 ./opal-output/
          docker compose --env-file=.demo.env -f compose.obds-fhir-to-opal.yaml up

      - name: convert the FHIR resources to the CSV dataset (study_protocol_c)
        working-directory: docker-compose/
        env:
          STUDY_NAME: "study_protocol_c"
          OUTPUT_FILENAME: "df-study_protocol_c.csv"
          OBDS_FHIR_TO_OPAL_IMAGE_TAG: ${{ needs.build-obds-fhir-to-opal-image.outputs.image-version }}
        run: |
          sudo chown -R 1001:1001 ./opal-output/
          docker compose --env-file=.demo.env -f compose.obds-fhir-to-opal.yaml up

      - name: convert the FHIR resources to the CSV dataset (study_protocol_a0_1_3_7)
        working-directory: docker-compose/
        env:
          STUDY_NAME: "study_protocol_a0_1_3_7"
          OUTPUT_FILENAME: "df-study_protocol_a0_1_3_7.csv"
          OBDS_FHIR_TO_OPAL_IMAGE_TAG: ${{ needs.build-obds-fhir-to-opal-image.outputs.image-version }}
        run: |
          sudo chown -R 1001:1001 ./opal-output/
          docker compose --env-file=.demo.env -f compose.obds-fhir-to-opal.yaml up

      - name: convert the FHIR resources to the CSV dataset (pca_therapies1)
        working-directory: docker-compose/
        env:
          STUDY_NAME: "pca_therapies1"
          OBDS_FHIR_TO_OPAL_IMAGE_TAG: ${{ needs.build-obds-fhir-to-opal-image.outputs.image-version }}
        run: |
          sudo chown -R 1001:1001 ./opal-output/
          docker compose --env-file=.demo.env -f compose.obds-fhir-to-opal.yaml up

      - name: upload the CSV
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: opal-df
          path: |
            docker-compose/opal-output/

      - name: Print compose logs
        if: always()
        working-directory: docker-compose/
        run: |
          docker compose --env-file=.demo.env \
            -f compose.kafka.yaml \
            -f compose.decompose-xmls.yaml \
            -f compose.obds-to-fhir.yaml \
            -f compose.obds-fhir-to-opal.yaml \
            -f compose.fhir-to-delta.yaml \
            -f trino-pathling/compose.yaml logs | tee compose-logs.txt

      - name: Upload compose dump
        if: always()
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: compose-logs
          path: |
            docker-compose/compose-logs.txt

  build-air-gapped-installer:
    name: build air-gapped installer package
    runs-on: ubuntu-24.04
    if: ${{ github.event_name == 'pull_request' }}
    steps:
      - name: Free Disk Space (Ubuntu)
        uses: jlumbroso/free-disk-space@54081f138730dfa15788a46383842cd2f914a1be # v1.3.1
        with:
          tool-cache: false
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          docker-images: true
          swap-storage: true

      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          persist-credentials: false

      - run: |
          ./build-air-gapped-installer.sh

  release:
    if: ${{ startsWith(github.ref, 'refs/tags/') }}
    permissions:
      actions: read
      contents: write
      id-token: write
      packages: write
    needs:
      - build-decompose-xml-image
      - build-obds-fhir-to-opal-image
    uses: ./.github/workflows/release.yaml
