services:
  trino:
    image: docker.io/trinodb/trino:453@sha256:86f7a156aeeca1dda3a1ba1e97474913d10c75f8fb7cda0da1d29a52b5731e0c
    ipc: none
    security_opt:
      - "no-new-privileges:true"
    cap_drop:
      - ALL
    privileged: false
    restart: unless-stopped
    environment:
      AWS_ACCESS_KEY_ID: "admin"
      AWS_SECRET_ACCESS_KEY: "miniopass"
    ports:
      - "127.0.0.1:8080:8080"
    volumes:
      - $PWD/config/etc:/usr/lib/trino/etc:ro
      - $PWD/config/catalog:/etc/trino/catalog:ro
    depends_on:
      - hive-metastore
      - minio

  minio:
    image: docker.io/bitnami/minio:2024.10.13@sha256:faf554135d50ff8b382f79df7795e080726cb2d6f4ce7f056d733a6437546f6a
    ipc: none
    security_opt:
      - "no-new-privileges:true"
    cap_drop:
      - ALL
    privileged: false
    restart: unless-stopped
    environment:
      MINIO_UPDATE: "off"
      MINIO_CALLHOME_ENABLE: "off"
      MINIO_ROOT_USER: "admin"
      # kics-scan ignore-line
      MINIO_ROOT_PASSWORD: "miniopass" # gitleaks:allow
      MINIO_DEFAULT_BUCKETS: "fhir"
      MINIO_SCHEME: "http"
    volumes:
      - minio-data:/bitnami/minio/data:rw
    ports:
      - "127.0.0.1:9001:9001"

  pathling:
    image: docker.io/aehrc/pathling:7.0.1@sha256:70177a4eb7a20a5edba7a4957ac6cd245c29e3c306e98c5de59fe2974c1f71b8
    ipc: none
    security_opt:
      - "no-new-privileges:true"
    cap_drop:
      - ALL
    privileged: false
    restart: unless-stopped
    environment:
      JAVA_TOOL_OPTIONS: |
        -Xmx16g
        -Xss64m
        -XX:G1HeapRegionSize=32M
        -XX:+ExplicitGCInvokesConcurrent
        -XX:+ExitOnOutOfMemoryError
        -XX:+HeapDumpOnOutOfMemoryError
        -Duser.timezone=UTC
        --add-exports=java.base/sun.nio.ch=ALL-UNNAMED
        --add-opens=java.base/java.net=ALL-UNNAMED
        --add-opens=java.base/java.nio=ALL-UNNAMED
        --add-opens=java.base/java.util=ALL-UNNAMED
        --add-opens=java.base/java.lang.invoke=ALL-UNNAMED
      pathling.storage.warehouseUrl: s3a://fhir
      pathling.storage.cacheDatasets: "false"
      pathling.query.cacheResults: "false"
      pathling.import.allowableSources: file:///tmp/import/
      pathling.terminology.enabled: "false"
      pathling.terminology.serverUrl: http://localhost:8080/i-dont-exist
      fs.s3a.endpoint: "http://minio:9000"
      fs.s3a.access.key: "admin"
      fs.s3a.secret.key: "miniopass"
      fs.s3a.impl: "org.apache.hadoop.fs.s3a.S3AFileSystem"
      fs.s3a.path.style.access: "true"
      spark.sql.parquet.compression.codec: "zstd"
      spark.io.compression.codec: "zstd"
      parquet.compression.codec.zstd.level: "9"
      spark.serializer: "org.apache.spark.serializer.KryoSerializer"
      spark.master: "local[*]"
      spark.driver.memory: 8g
    depends_on:
      - minio
    volumes:
      - $PWD/synthea/:/tmp/import/:ro

  wait-for-pathling:
    image: docker.io/curlimages/curl:8.8.0@sha256:73e4d532ea62d7505c5865b517d3704966ffe916609bedc22af6833dc9969bcd
    ipc: none
    security_opt:
      - "no-new-privileges:true"
    cap_drop:
      - ALL
    privileged: false
    restart: "no"
    environment:
      PATHLING_URL: http://pathling:8080
    entrypoint: ["/bin/sh", "-c"]
    command:
      - |
        until [ "$(curl -s -o /dev/null -L -w "%{http_code}" "$$PATHLING_URL/fhir/metadata")" == "200" ]; do
            echo "$(date): Waiting for pathling server @ $$PATHLING_URL to be up";
            sleep 5;
        done;
    depends_on:
      pathling:
        condition: service_started

  import-resources:
    image: docker.io/curlimages/curl:8.8.0@sha256:73e4d532ea62d7505c5865b517d3704966ffe916609bedc22af6833dc9969bcd
    ipc: none
    security_opt:
      - "no-new-privileges:true"
    cap_drop:
      - ALL
    privileged: false
    restart: "no"
    environment:
      PATHLING_URL: http://pathling:8080
    entrypoint: ["/bin/sh", "-c"]
    command:
      - |
        curl -X POST --header 'Content-Type: application/fhir+json' --data @/tmp/pathling-import-request.json --url 'http://pathling:8080/fhir/$$import'
    volumes:
      - $PWD/synthea/pathling-import-request.json:/tmp/pathling-import-request.json:ro
    depends_on:
      wait-for-pathling:
        condition: service_completed_successfully

  warehousekeeper:
    image: ghcr.io/miracum/util-images/warehousekeeper:v0.1.7@sha256:1487804b409e0f85a1b6e89b7bdd5dd89b730dfc41e2348fbde0810c9f3ea00a
    ipc: none
    security_opt:
      - "no-new-privileges:true"
    cap_drop:
      - ALL
    privileged: false
    restart: "no"
    environment:
      AWS_ALLOW_HTTP: "1"
      AWS_REGION: "eu-central-1"
      AWS_ENDPOINT_URL: "http://minio:9000"
      AWS_ACCESS_KEY_ID: "admin"
      AWS_SECRET_ACCESS_KEY: "miniopass"
    entrypoint: ["/bin/sh", "-c"]
    command:
      - |
        python3 /opt/warehousekeeper/warehousekeeper.py register --bucket-name=fhir --database-name-prefix=default/ --hive-metastore=thrift://hive-metastore:9083
        python3 /opt/warehousekeeper/warehousekeeper.py optimize --bucket-name=fhir --database-name-prefix=default/
        python3 /opt/warehousekeeper/warehousekeeper.py vacuum   --bucket-name=fhir --database-name-prefix=default/ --retention-hours=0 --dry-run=false --enforce-retention-duration=false
    volumes:
      - $PWD/config/spark-defaults.conf:/opt/spark/conf/spark-defaults.conf:ro
    depends_on:
      import-resources:
        condition: service_completed_successfully

  hive-metastore-db:
    image: docker.io/bitnami/postgresql:16.3.0@sha256:b0248a5e2bf4fda5208183d4a6203287828666823a7a57431cfa4d31688bae97
    ipc: private
    security_opt:
      - "no-new-privileges:true"
    cap_drop:
      - ALL
    privileged: false
    restart: unless-stopped
    environment:
      POSTGRESQL_USERNAME: hive
      POSTGRESQL_PASSWORD: hive
      POSTGRESQL_DATABASE: metastore

  hive-metastore:
    image: ghcr.io/miracum/util-images/hive-metastore:v1.2.0@sha256:d8f99a4a16ede640f184dca9bd84bef84f84b26f41b10eb5c62a57bb796268c8
    ipc: none
    security_opt:
      - "no-new-privileges:true"
    cap_drop:
      - ALL
    privileged: false
    restart: unless-stopped
    environment:
      SERVICE_NAME: metastore
      DB_DRIVER: postgres
      SERVICE_OPTS: |
        -Djavax.jdo.option.ConnectionUserName=hive
        -Djavax.jdo.option.ConnectionPassword=hive
      AWS_ACCESS_KEY_ID: "admin"
      AWS_SECRET_ACCESS_KEY: "miniopass"
      AWS_DEFAULT_REGION: "eu-central-1"
    volumes:
      - $PWD/config/hive-site.xml:/opt/hive/conf/hive-site.xml:ro
    depends_on:
      hive-metastore-db:
        condition: service_started

volumes:
  minio-data: {}
  hive-metastore-db-data: {}
